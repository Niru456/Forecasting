# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O7wOGuvq7vG33yhoIQzgcXF5gXH4eLtl
"""

from google.colab import files
uploaded=files.upload()

import pandas as pd
Airlines= pd.read_csv("Airlines+Data.csv")
Airlines

#EDA

Airlines.Passengers.plot()
Airlines.hist()

Airlines["Date"] = pd.to_datetime(Airlines.Month,format="%b-%y")
Airlines

Airlines["month"]=Airlines.Date.dt.strftime("%b") # month extraction
Airlines["year"]=Airlines.Date.dt.strftime("%Y") # year extraction
Airlines

#EDA
import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(12,8))
heatmap_y_month = pd.pivot_table(data=Airlines,values="Passengers",index="year",columns="month",fill_value=0)
sns.heatmap(heatmap_y_month,annot=True,fmt="g") #fmt is format of the grid values

# Boxplot for ever
plt.figure(figsize=(10,8))
#plt.subplot(211)
sns.boxplot(x="month",y="Passengers",data=Airlines)
#plt.subplot(212)
plt.figure(figsize=(10,8))
sns.boxplot(x="year",y="Passengers",data=Airlines)

plt.figure(figsize=(12,3))
sns.lineplot(x="year",y="Passengers",data=Airlines)

# Splitting data
Airlines.shape
Train = Airlines.head(80)
Test = Airlines.tail(17)

#Inserting the stats model for our dataset
import statsmodels.formula.api as smf 

#Linear Model
import numpy as np

#lm.fit(x,y) #this is how we fit in Linear model
#y~x #this is how we fit in stats model

linear_model = smf.ols('Passengers ~ t',data=Train).fit()
pred_linear = pd.Series(linear_model.predict(pd.DataFrame(Test['t'])))
rmse_linear = np.sqrt(np.mean((np.array(Test['Passengers'])-np.array(pred_linear))**2))
#np.sqrt(np.mean((Test['Footfalls']-np.array(pred_linear))**2))
rmse_linear
#rmse = 48.951

#Exponential
Exp = smf.ols('log_Passengers~t',data=Train).fit()
pred_Exp = pd.Series(Exp.predict(pd.DataFrame(Test['t'])))
rmse_Exp = np.sqrt(np.mean((np.array(Test['Passengers'])-np.array(np.exp(pred_Exp)))**2))
rmse_Exp
# rmse exp=308.236

#Quadratic 
Quad = smf.ols('Passengers~t+t_square',data=Train).fit()
pred_Quad = pd.Series(Quad.predict(Test[["t","t_square"]]))
#pred_Quad = pd.Series(Exp.predict(pd.DataFrame(Test[["t","t_square"]))) # we hve to verify
rmse_Quad = np.sqrt(np.mean((np.array(Test['Passengers'])-np.array(pred_Quad))**2))
rmse_Quad
#rmse quad= 44.461

#Additive seasonality 
add_sea = smf.ols('Passengers~Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov+Dec',data=Train).fit()
pred_add_sea = pd.Series(add_sea.predict(Test[['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']]))
rmse_add_sea = np.sqrt(np.mean((np.array(Test['Passengers'])-np.array(pred_add_sea))**2))
rmse_add_sea
#rmse additive = 128.127

#Additive Seasonality Quadratic 
add_sea_Quad = smf.ols('Passengers~t+t_square+Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov+Dec',data=Train).fit()
pred_add_sea_quad = pd.Series(add_sea_Quad.predict(Test[['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','t','t_square']]))
rmse_add_sea_quad = np.sqrt(np.mean((np.array(Test['Passengers'])-np.array(pred_add_sea_quad))**2))
rmse_add_sea_quad
#rmse additive seasonality = 23.940

##Multiplicative Seasonality
Mul_sea = smf.ols('log_Passengers~Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov+Dec',data = Train).fit()
pred_Mult_sea = pd.Series(Mul_sea.predict(Test))
rmse_Mult_sea = np.sqrt(np.mean((np.array(Test['Passengers'])-np.array(np.exp(pred_Mult_sea)))**2))
rmse_Mult_sea
#rmse multiplicative = 310.734

#Multiplicative Additive Seasonality 
Mul_Add_sea = smf.ols('log_Passengers~t+Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov+Dec',data = Train).fit()
pred_Mult_add_sea = pd.Series(Mul_Add_sea.predict(Test))
rmse_Mult_add_sea = np.sqrt(np.mean((np.array(Test['Passengers'])-np.array(np.exp(pred_Mult_add_sea)))**2))
rmse_Mult_add_sea 

#rmse multiplicative additive= 308.2593

#Compare the results 
data = {"MODEL":pd.Series(["rmse_linear","rmse_Exp","rmse_Quad","rmse_add_sea","rmse_add_sea_quad","rmse_Mult_sea","rmse_Mult_add_sea"]),"RMSE_Values":pd.Series([rmse_linear,rmse_Exp,rmse_Quad,rmse_add_sea,rmse_add_sea_quad,rmse_Mult_sea,rmse_Mult_add_sea])}
type(data)

table_rmse=pd.DataFrame(data)
table_rmse.sort_values(['RMSE_Values'])

from google.colab import files
uploaded=files.upload()

#### Predict for new time period
new_data = pd.read_csv("Predict_New_1.csv")

new_data

#Build the model on entire data set
model_full = smf.ols('Passengers~t+t_square+Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov+Dec',data=Airlines).fit()

pred_new  = pd.Series(model_full.predict(new_data))
pred_new

#Adding forecasted values to our dataset pred_new
new_data["forecasted_Passengers"] = pd.Series(pred_new)

#concat the predicted with original
new_var = pd.concat([Airlines,new_data])
new_var.shape
new_var.head()
new_var.tail()

#Plot for predictions for the next 12 months, Jan 2003 to Dec 2003
new_var[['Passengers','forecasted_Passengers']].reset_index(drop=True).plot()

#Exporting the csv to view the data 
new_var.to_csv("E:\\DS - ExcelR\\Assignments\\Forecasting\\New data with predictions.csv")

